name: Deploy

on:
  workflow_run:
    workflows: [CI]
    types: [completed]
    branches: [master]

env:
  CARGO_TERM_COLOR: always
  DOCKER_REPO: leonardoarcari/dcapal

jobs:
  extract-version:
    runs-on: ubuntu-22.04
    if: ${{ github.event.workflow_run.conclusion == 'success' }}
    outputs:
      metadata: ${{ steps.step_metadata.outputs.metadata }}
    steps:
      - uses: actions/checkout@v3
      - uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: stable
      - id: step_metadata
        run: |
          cargo metadata --no-deps --format-version=1 > metadata.json
          content=`cat metadata.json`
          # the following lines are only required for multi line json
          content="${content//'%'/'%25'}"
          content="${content//$'\n'/'%0A'}"
          content="${content//$'\r'/'%0D'}"
          # end of optional handling for multi line json
          echo "metadata=${content}" >> $GITHUB_OUTPUT

  build-docker-image:
    runs-on: ubuntu-22.04
    needs: extract-version
    env:
      VERSION: ${{ fromJson(needs.extract-version.outputs.metadata).packages[0].version }}
    steps:
      - uses: actions/checkout@v3
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      - name: Cache Docker layers
        uses: actions/cache@v3
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-
      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Build and push
        uses: docker/build-push-action@v3
        with:
          context: ./dcapal-backend
          file: ./dcapal-backend/docker/Dockerfile
          push: true
          tags: ${{ env.DOCKER_REPO }}:latest,${{ env.DOCKER_REPO }}:${{ env.VERSION }}
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache-new,mode=max
      - # Temp fix
        # https://github.com/docker/build-push-action/issues/252
        # https://github.com/moby/buildkit/issues/1896
        name: Move cache
        run: |
          rm -rf /tmp/.buildx-cache
          mv /tmp/.buildx-cache-new /tmp/.buildx-cache

  optimizer-build:
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v3
      - uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: stable
      - uses: Swatinem/rust-cache@v2

      - name: Install wasm-pack
        run: curl https://rustwasm.github.io/wasm-pack/installer/init.sh -sSf | sh

      - name: Toolchain info
        run: |
          cargo --version --verbose
          rustc --version

      - name: Build
        run: |
          cd dcapal-optimizer-wasm
          wasm-pack build --release

      - name: Archive dcapal-optimizer-wasm pkg
        uses: actions/upload-artifact@v3
        with:
          name: dcapal-optimizer-wasm-pkg
          path: dcapal-optimizer-wasm/pkg

  frontend-build:
    runs-on: ubuntu-22.04
    needs: optimizer-build
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v3
        with:
          node-version: 18
          cache: "npm"
          cache-dependency-path: dcapal-frontend/package-lock.json

      - name: Download dcapal-optimizer-wasm pkg
        uses: actions/download-artifact@v3
        with:
          name: dcapal-optimizer-wasm-pkg
          path: dcapal-optimizer-wasm/pkg

      - name: Install dependencies
        run: |
          cd dcapal-frontend
          npm ci

      - name: Build
        run: |
          cd dcapal-frontend
          npm run build

      - name: Archive dcapal-frontend
        uses: actions/upload-artifact@v3
        with:
          name: dcapal-frontend-dist
          path: dcapal-frontend/dist

  deploy:
    runs-on: ubuntu-22.04
    needs: [build-docker-image, frontend-build]
    steps:
      - uses: actions/checkout@v3
      - name: Download dcapal-frontend
        uses: actions/download-artifact@v3
        with:
          name: dcapal-frontend-dist
          path: dcapal-frontend/dist

      - name: Deploy dcapal-frontend
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USERNAME }}
          port: ${{ secrets.SSH_PORT }}
          key: ${{ secrets.SSH_KEY }}
          source: dcapal-frontend/dist
          target: ${{ secrets.WEB_DIR }}
          strip_components: 2

      - name: Configure docker-compose.yml
        env:
          REDIS_PORT: ${{ secrets.REDIS_PORT }}
        run: |
          cat > dcapal-backend/docker-compose.yml << EOF
          version: "3.9"
          services:
            redis:
              image: redis/redis-stack-server
              container_name: redis
              restart: always
              expose:
                - 6379
              networks:
                - dcapalnetwork
              volumes:
                - ./config/redis/redis-stack.conf:/redis-stack.conf
                - ./config/redis/users.acl:/etc/redis/users.acl
                - ./data/redis/:/data
              healthcheck:
                test: redis-cli --raw incr ping
                interval: 10s
                timeout: 10s
                retries: 3

          networks:
            dcapalnetwork:
          EOF

      - name: Configure docker-compose.prod.yml
        env:
          DCAPAL_API_PORT: ${{ secrets.DCAPAL_API_PORT }}
          DCAPAL_METRICS_PORT: ${{ secrets.DCAPAL_METRICS_PORT }}
        run: |
          cat > dcapal-backend/docker/docker-compose.prod.yml << EOF
          version: "3.9"
          services:
            dcapal:
              image: leonardoarcari/dcapal:latest
              restart: always
              ports:
                - ${DCAPAL_API_PORT}:8080
                - ${DCAPAL_METRICS_PORT}:9000
              networks:
                - dcapalnetwork
              volumes:
                - ./dcapal.yml:/var/dcapal-backend/dcapal.yml
                - ./data/dcapal:/var/dcapal-backend/data
              depends_on:
                redis:
                  condition: service_healthy
              healthcheck:
                test: curl --fail http://localhost:8080 || exit 1
                interval: 10s
                timeout: 10s
                retries: 5
          EOF

      - name: Configure Redis ACL
        env:
          REDIS_USER: ${{ secrets.REDIS_USER }}
          REDIS_PASSWORD: ${{ secrets.REDIS_PASSWORD }}
          REDIS_ADMIN: ${{ secrets.REDIS_ADMIN }}
          REDIS_ADMIN_PASSWORD: ${{ secrets.REDIS_ADMIN_PASSWORD }}
        run: |
          cat > dcapal-backend/config/redis/users.acl << EOF
          user ${REDIS_USER} +@all -@dangerous ~* on >${REDIS_PASSWORD}
          user ${REDIS_ADMIN} ~* &* +@all on >${REDIS_ADMIN_PASSWORD}
          user default off
          EOF

      - name: Configure dcapal.yml
        env:
          DCAPAL_CW_API_KEY: ${{ secrets.DCAPAL_CW_API_KEY }}
          DCAPAL_IP_API_KEY: ${{ secrets.DCAPAL_IP_API_KEY }}
          DCAPAL_API_PORT: ${{ secrets.DCAPAL_API_PORT }}
          DCAPAL_METRICS_PORT: ${{ secrets.DCAPAL_METRICS_PORT }}
          REDIS_PORT: ${{ secrets.REDIS_PORT }}
          REDIS_USER: ${{ secrets.REDIS_USER }}
          REDIS_PASSWORD: ${{ secrets.REDIS_PASSWORD }}
        run: |
          cat > dcapal-backend/dcapal.yml << EOF
          app:
            providers:
              priceProvider: yahoo
              cwApiKey: ${DCAPAL_CW_API_KEY}
              ipApiKey: ${DCAPAL_IP_API_KEY}

            log:
              level: dcapal_backend=info,tower_http=debug
              file: data/dcapal.log
              enableStdout: false

          server:
            web:
              hostname: 0.0.0.0
              port: ${DCAPAL_API_PORT}
            metrics:
              hostname: 0.0.0.0
              port: ${DCAPAL_METRICS_PORT}
            redis:
              hostname: redis
              port: ${REDIS_PORT}
              user: ${REDIS_USER}
              password: ${REDIS_PASSWORD}
          EOF

      - name: Deploy dcapal-backend config
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USERNAME }}
          port: ${{ secrets.SSH_PORT }}
          key: ${{ secrets.SSH_KEY }}
          source: dcapal-backend/config,dcapal-backend/docker/docker-compose.prod.yml,dcapal-backend/docker-compose.yml,dcapal-backend/dcapal.yml
          target: ${{ secrets.DCAPAL_DIR }}
          strip_components: 1

      - name: Deploy dcapal-backend
        uses: appleboy/ssh-action@master
        env:
          DCAPAL_DIR: ${{ secrets.DCAPAL_DIR }}
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USERNAME }}
          port: ${{ secrets.SSH_PORT }}
          key: ${{ secrets.SSH_KEY }}
          envs: DCAPAL_DIR
          script: |
            cd ${DCAPAL_DIR}
            ls -la
            mkdir -p ./data/dcapal
            touch ./data/dcapal/dcapal.log
            docker compose -f docker-compose.yml -f ./docker/docker-compose.prod.yml pull
            docker compose -f docker-compose.yml -f ./docker/docker-compose.prod.yml up -d
