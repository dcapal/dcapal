//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.0

use sea_orm::entity::prelude::*;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq)]
#[sea_orm(table_name = "portfolio_asset")]
pub struct Model {
    #[sea_orm(primary_key, auto_increment = false)]
    pub id: Uuid,
    #[sea_orm(column_type = "Text")]
    pub symbol: String,
    pub portfolio_id: Uuid,
    #[sea_orm(column_type = "Text")]
    pub name: String,
    #[sea_orm(column_type = "Text")]
    pub asset_class: String,
    #[sea_orm(column_type = "Text")]
    pub currency: String,
    #[sea_orm(column_type = "Text")]
    pub provider: String,
    #[sea_orm(column_type = "Decimal(Some((20, 10)))")]
    pub quantity: Decimal,
    #[sea_orm(column_type = "Decimal(Some((20, 10)))")]
    pub target_weight: Decimal,
    #[sea_orm(column_type = "Decimal(Some((20, 10)))")]
    pub price: Decimal,
    #[sea_orm(column_type = "Decimal(Some((20, 10)))", nullable)]
    pub max_fee_impact: Option<Decimal>,
    #[sea_orm(column_type = "Text", nullable)]
    pub fee_type: Option<String>,
    #[sea_orm(column_type = "Decimal(Some((20, 10)))", nullable)]
    pub fee_amount: Option<Decimal>,
    #[sea_orm(column_type = "Decimal(Some((20, 10)))", nullable)]
    pub fee_rate: Option<Decimal>,
    #[sea_orm(column_type = "Decimal(Some((20, 10)))", nullable)]
    pub min_fee: Option<Decimal>,
    #[sea_orm(column_type = "Decimal(Some((20, 10)))", nullable)]
    pub max_fee: Option<Decimal>,
    pub created_at: DateTimeWithTimeZone,
    pub updated_at: DateTimeWithTimeZone,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(
        belongs_to = "super::portfolios::Entity",
        from = "Column::PortfolioId",
        to = "super::portfolios::Column::Id",
        on_update = "NoAction",
        on_delete = "NoAction"
    )]
    Portfolios,
}

impl Related<super::portfolios::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Portfolios.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
