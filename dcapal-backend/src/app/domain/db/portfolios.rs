//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.0

use sea_orm::entity::prelude::*;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq)]
#[sea_orm(table_name = "portfolios")]
pub struct Model {
    #[sea_orm(primary_key, auto_increment = false)]
    pub id: Uuid,
    pub user_id: Uuid,
    #[sea_orm(column_type = "Text")]
    pub name: String,
    #[sea_orm(column_type = "Text")]
    pub currency: String,
    pub deleted: bool,
    pub last_updated_at: DateTimeWithTimeZone,
    #[sea_orm(column_type = "Decimal(Some((20, 10)))", nullable)]
    pub max_fee_impact: Option<Decimal>,
    #[sea_orm(column_type = "Text", nullable)]
    pub fee_type: Option<String>,
    #[sea_orm(column_type = "Decimal(Some((20, 10)))", nullable)]
    pub fee_amount: Option<Decimal>,
    #[sea_orm(column_type = "Decimal(Some((20, 10)))", nullable)]
    pub fee_rate: Option<Decimal>,
    #[sea_orm(column_type = "Decimal(Some((20, 10)))", nullable)]
    pub min_fee: Option<Decimal>,
    #[sea_orm(column_type = "Decimal(Some((20, 10)))", nullable)]
    pub max_fee: Option<Decimal>,
    pub created_at: DateTimeWithTimeZone,
    pub updated_at: DateTimeWithTimeZone,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(has_many = "super::portfolio_asset::Entity")]
    PortfolioAsset,
    #[sea_orm(
        belongs_to = "super::users::Entity",
        from = "Column::UserId",
        to = "super::users::Column::Id",
        on_update = "NoAction",
        on_delete = "NoAction"
    )]
    Users,
}

impl Related<super::portfolio_asset::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::PortfolioAsset.def()
    }
}

impl Related<super::users::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Users.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
